@startuml beCurrent - Clean Architecture (Walking Skeleton v1)

package "UI" #lightgreen {
  class FeedView {
    + viewModel: FeedViewModel
    --
    + body: some View
  }
  
  class PostCardView {
    + post: PostViewModel
    --
    + body: some View
  }
  
  class PostCreationView {
    + viewModel: PostCreationViewModel
    --
    - isShowingCamera: Bool
    - isShowingImagePicker: Bool
    --
    + body: some View
  }
}

package "PRESENTATION" #lightcyan {
  class FeedViewModel {
    - getFeedUseCase: GetFeedUseCaseProtocol
    - refreshFeedUseCase: RefreshFeedUseCaseProtocol
    --
    + posts: [PostViewModel]
    + isLoading: Bool
    + errorMessage: String?
    --
    + loadFeed() async
    + refreshFeed() async
  }
  
  class PostViewModel <<struct>> {
    + id: String
    + username: String
    + frontImageURL: URL
    + backImageURL: URL
    + caption: String?
    + timeAgo: String
    + isLate: Bool
    + lateIndicator: String?
  }
  
  class PostCreationViewModel {
    - createPostUseCase: CreatePostUseCaseProtocol
    --
    + frontImage: UIImage?
    + backImage: UIImage?
    + caption: String
    + isCreating: Bool
    + errorMessage: String?
    + canSubmit: Bool
    --
    + createPost() async
  }
}

package "DOMAIN" #lightyellow {
  class Post <<struct>> {
    + id: UUID
    + user: User
    + frontImageURL: URL
    + backImageURL: URL
    + caption: String?
    + location: CLLocation?
    + timestamp: Date
    + isLate: Bool
    + lateByMinutes: Int?
  }
  
  class User <<struct>> {
    + id: UUID
    + username: String
    + displayName: String
    + profileImageURL: URL?
  }
  
  interface GetFeedUseCaseProtocol {
    + feedPosts: [Post] { get async throws }
  }
  
  class GetFeedUseCase {
    - postRepository: PostRepository
    --
    + feedPosts: [Post] { get async throws }
  }
  
  interface RefreshFeedUseCaseProtocol {
    + feedPosts: [Post] { get async throws }
  }
  
  class RefreshFeedUseCase {
    - postRepository: PostRepository
    --
    + feedPosts: [Post] { get async throws }
  }
  
  interface CreatePostUseCaseProtocol {
    + createPost(frontImageData: Data, backImageData: Data, caption: String?) async throws -> Post
  }
  
  class CreatePostUseCase {
    - postRepository: PostRepository
    - userRepository: UserRepository
    --
    + createPost(frontImageData: Data, backImageData: Data, caption: String?) async throws -> Post
  }
  
  interface PostRepository {
    + feed: [Post] { get async throws }
    + createPost(post: Post) async throws -> Post
    + refreshedFeed: [Post] { get async throws }
  }
  
  interface UserRepository {
    + currentUser: User { get async throws }
  }
}

package "DATA" #lightcoral {
  class MockPostRepository {
    - mockPosts: [Post]
    - mockUsers: [User]
    + feed: [Post] { get async throws }
    + createPost(post: Post) async throws -> Post
    + refreshedFeed: [Post] { get async throws }
  }
  
  class MockUserRepository {
    - _currentUser: User
    + currentUser: User { get async throws }
  }
  
  class APIService <<Future>> {
    + fetchFeed() async throws -> [PostDTO]
    + uploadPost() async throws -> PostDTO
  }
  
  class CoreDataService <<Future>> {
    + savePosts([Post])
    + loadCachedPosts() -> [Post]
  }
}

package "APP" #lightblue {
  class beCurrentApp {
    + main()
  }
  
  class ContentView {
    + body: some View
  }
}

FeedView -- FeedViewModel
FeedView -[#red]-> PostCardView
PostCardView -- PostViewModel
PostCreationView -- PostCreationViewModel

FeedViewModel -[#red]-> GetFeedUseCaseProtocol
FeedViewModel -[#red]-> RefreshFeedUseCaseProtocol
PostCreationViewModel -[#red]-> CreatePostUseCaseProtocol

GetFeedUseCase -[#red]-> PostRepository
CreatePostUseCase -[#red]-> PostRepository
CreatePostUseCase -[#red]-> UserRepository
RefreshFeedUseCase -[#red]-> PostRepository

FeedViewModel <-[#orange]- GetFeedUseCaseProtocol : [Post]
FeedViewModel <-[#orange]- RefreshFeedUseCaseProtocol : [Post]
PostCreationViewModel <-[#orange]- CreatePostUseCaseProtocol : Post

GetFeedUseCaseProtocol <|.. GetFeedUseCase
RefreshFeedUseCaseProtocol <|.. RefreshFeedUseCase
CreatePostUseCaseProtocol <|.. CreatePostUseCase

PostRepository <|.. MockPostRepository
UserRepository <|.. MockUserRepository

MockPostRepository -[#red]-> APIService : Future
MockPostRepository -[#red]-> CoreDataService : Future
MockPostRepository <-[#orange]- APIService : [PostDTO]
MockPostRepository <-[#orange]- CoreDataService : [Post]

GetFeedUseCase -[#red]-> Post : uses
CreatePostUseCase -[#red]-> Post : creates
CreatePostUseCase -[#red]-> User : uses

beCurrentApp --> ContentView
ContentView --> FeedView

@enduml
